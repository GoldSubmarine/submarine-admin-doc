(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{367:function(e,t,a){"use strict";a.r(t);var r=a(42),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"其他功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他功能"}},[e._v("#")]),e._v(" 其他功能")]),e._v(" "),a("h2",{attrs:{id:"漏洞检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#漏洞检测"}},[e._v("#")]),e._v(" 漏洞检测")]),e._v(" "),a("p",[e._v("项目目前使用 "),a("a",{attrs:{href:"https://github.com/classgraph/classgraph",target:"_blank",rel:"noopener noreferrer"}},[e._v("classgraph"),a("OutboundLink")],1),e._v(" ，在 dev 环境下对当前项目的类进行扫描，从而检测出常见的 bug，并将校验结果打印在控制台。目前实现了以下常见 bug 的校验（代码位于 "),a("code",[e._v("com.htnova.common.dev")]),e._v(" 目录下）：")]),e._v(" "),a("ol",[a("li",[e._v("Dto 中定义的 Long 类型字段需要加上 "),a("code",[e._v("@JsonSerialize(using = ToStringSerializer.class)")]),e._v(" 注解，防止前端数字类型精度丢失问题")]),e._v(" "),a("li",[e._v("项目中推荐使用 LocalDateTime，检测到 Date 类型的字段则进行提醒")]),e._v(" "),a("li",[e._v("校验数据库表和实体的数量是否匹配，以及每张表和实体的字段名称是否匹配")]),e._v(" "),a("li",[e._v("发生继承的 java bean，是否使用了 "),a("code",[e._v("@SuperBuilder")]),e._v(" lombok 注解")]),e._v(" "),a("li",[e._v("mybatis 的 xml 非 String 类型的字段，是否与空字符串进行了比较，例如："),a("code",[e._v("<if test=\"deptDto.createTime != null and deptDto.createTime != ''\">")])]),e._v(" "),a("li",[e._v("mybatis 的 xml 是否使用 "),a("code",[e._v("${param}")]),e._v(" ，可能引起 sql 注入问题")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),a("p",[e._v("校验的类使用了懒加载的机制，非 dev 环境下不会注入到 spring 容器中")])]),e._v(" "),a("h2",{attrs:{id:"历史查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#历史查询"}},[e._v("#")]),e._v(" 历史查询")]),e._v(" "),a("p",[e._v("需求是新建表单时，用户输入过的内容能够再次提示出来。使用 "),a("a",{attrs:{href:"https://github.com/classgraph/classgraph",target:"_blank",rel:"noopener noreferrer"}},[e._v("classgraph"),a("OutboundLink")],1),e._v(" 在初始化时扫描所有带有 "),a("code",[e._v("@QueryHistoryField")]),e._v(" 注解的实体属性，形成一个白名单，只有该名单内的属性才能进行历史查询，这样防范了 sql 注入的问题。")]),e._v(" "),a("p",[a("code",[e._v("@QueryHistoryField")]),e._v(" 支持 value 属性，默认不写 value 的情况，将属性名进行驼峰转下划线，进行 sql 查询；当属性名和表字段不一致时，可自行指定 value 的值为表字段名。")]),e._v(" "),a("p",[e._v("前端访问 "),a("code",[e._v("/query/history")]),e._v(" 接口，参数为 "),a("code",[e._v("(String table, String fields)")]),e._v(" ，其中 fields 支持逗号拼接，也就是查询一张表的多个字段的历史记录，table 和 fields 可驼峰可下划线，已进行了兼容处理")]),e._v(" "),a("h2",{attrs:{id:"流水单编号生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流水单编号生成"}},[e._v("#")]),e._v(" 流水单编号生成")]),e._v(" "),a("p",[e._v("如果业务的每条记录都需要增加流水号，可以让业务实体实现 "),a("code",[e._v("BizNumber")]),e._v(" 接口，并调用 "),a("code",[e._v("BizNumberService.computeBizNumber")]),e._v(" 方法，该方法返回一个一串数字，例如 "),a("code",[e._v("202009150002")]),e._v("，表示 2020 年 09 月 15 日的第 2 个单号")])])}),[],!1,null,null,null);t.default=v.exports}}]);